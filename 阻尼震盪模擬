import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider
from scipy.fftpack import fft


t = np.linspace(0, 10, 1000)
x0 = 1.0
v0 = 0.0

def simulate_damped_oscillator(b, omega, x0=1.0, v0=0.0):
    if b < omega:  # 欠阻尼
        wd = np.sqrt(omega**2 - b**2)
        A = x0
        B = (v0 + b * x0) / wd
        x = np.exp(-b * t) * (A * np.cos(wd * t) + B * np.sin(wd * t))
    elif b == omega:
        A = x0
        B = v0 + b * x0
        x = (A + B * t) * np.exp(-b * t)
    else:  # 過阻尼
        r1 = -b + np.sqrt(b**2 - omega**2)
        r2 = -b - np.sqrt(b**2 - omega**2)
        A = (v0 - r2 * x0) / (r1 - r2)
        B = x0 - A
        x = A * np.exp(r1 * t) + B * np.exp(r2 * t)
    return x

init_b = 0.2
init_omega = 2 * np.pi  # 1 Hz

fig, axs = plt.subplots(3, 1, figsize=(12, 10))
plt.subplots_adjust(left=0.15, bottom=0.35)

x = simulate_damped_oscillator(init_b, init_omega)
v = np.gradient(x, t)
ke = 0.5 * v**2
pe = 0.5 * init_omega**2 * x**2
energy = ke + pe
fft_vals = np.abs(fft(x))[:len(t)//2]
freq = np.fft.fftfreq(len(t), t[1]-t[0])[:len(t)//2]

l1, = axs[0].plot(t, x, label="x(t)")
axs[0].set_title("wave displacement")
axs[0].set_ylabel("displacement")
axs[0].grid()

l2, = axs[1].plot(t, energy, label="E(t)", color='orange')
axs[1].set_title("energy change")
axs[1].set_ylabel("energy")
axs[1].grid()

l3, = axs[2].plot(freq, fft_vals, label="FFT(x)", color='green')
axs[2].set_title("FS")
axs[2].set_xlabel("Hz")
axs[2].set_ylabel("amplitude")
axs[2].grid()

ax_b = plt.axes([0.25, 0.2, 0.65, 0.03])
ax_omega = plt.axes([0.25, 0.15, 0.65, 0.03])

slider_b = Slider(ax_b, '阻尼 b', 0.0, 10.0, valinit=init_b)
slider_omega = Slider(ax_omega, '自然頻率 ω', 0.1, 10.0, valinit=init_omega)

def update(val):
    b = slider_b.val
    omega = slider_omega.val
    x = simulate_damped_oscillator(b, omega, x0, v0)
    v = np.gradient(x, t)
    ke = 0.5 * v**2
    pe = 0.5 * omega**2 * x**2
    energy = ke + pe
    fft_vals = np.abs(fft(x))[:len(t)//2]

    l1.set_ydata(x)
    l2.set_ydata(energy)
    l3.set_ydata(fft_vals)
    fig.canvas.draw_idle()

slider_b.on_changed(update)
slider_omega.on_changed(update)

plt.show()

